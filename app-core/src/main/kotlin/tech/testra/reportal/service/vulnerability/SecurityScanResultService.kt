package tech.testra.reportal.service.vulnerability

import org.springframework.stereotype.Service
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import reactor.core.publisher.toFlux
import reactor.core.publisher.toMono
import tech.testra.reportal.domain.entity.ScanResult
import tech.testra.reportal.domain.valueobjects.ProjectType
import tech.testra.reportal.domain.valueobjects.VulnerabilityAlert
import tech.testra.reportal.domain.valueobjects.VulnerabilityRiskLevel
import tech.testra.reportal.exception.ProjectNotFoundException
import tech.testra.reportal.exception.ProjectTypeIsNotSecurityException
import tech.testra.reportal.extension.flatMapManyWithResumeOnError
import tech.testra.reportal.extension.flatMapWithResumeOnError
import tech.testra.reportal.repository.IScanResultRepository
import tech.testra.reportal.repository.IVulnerabilityRepository
import tech.testra.reportal.service.interfaces.ISecurityScanResultService
import tech.testra.reportal.service.interfaces.ITestExecutionService
import tech.testra.reportal.service.interfaces.ITestProjectService

@Service
class SecurityScanResultService(
    private val _scanResultRepository: IScanResultRepository,
    private val _vulnerabilityRepository: IVulnerabilityRepository,
    private val _testProjectService: ITestProjectService,
    private val _testExecutionService: ITestExecutionService
) : ISecurityScanResultService {

    override fun getScanResultById(projectId: String, executionId: String, resultId: String): Mono<ScanResult> =
        _testExecutionService.getExecutionById(projectId, executionId)
            .flatMapWithResumeOnError { _scanResultRepository.findById(resultId) }

    override fun getScanResultsByProjectAndExecutionId(projectId: String, executionId: String): Flux<ScanResult> =
        _testExecutionService.getExecutionById(projectId, executionId)
            .flatMapManyWithResumeOnError { _scanResultRepository.findAll(projectId, executionId) }

    override fun createScanResult(
        projectId: String,
        executionId: String,
        securityScanResult: Mono<tech.testra.reportal.model.SecurityScanResult>
    ): Mono<Void> {
        return _testProjectService.getProject(projectId)
            .switchIfEmpty(ProjectNotFoundException(projectId).toMono())
            .flatMap {
                if (it.projectType == ProjectType.SECURITY) {
                    securityScanResult.flatMap {
                        val securityScanResult = it
                        it.alerts.toFlux()
                            .flatMap {
                                val vulnerabilityAlertFromModel = it
                                _vulnerabilityRepository.findByName(it.name)
                                    .flatMap {
                                        VulnerabilityAlert(
                                            executionId = executionId,
                                            riskLevel = VulnerabilityRiskLevel.valueOf(vulnerabilityAlertFromModel.riskLevel.toString()),
                                            description = vulnerabilityAlertFromModel.description,
                                            solution = vulnerabilityAlertFromModel.solution,
                                            otherInfo = vulnerabilityAlertFromModel.otherInfo,
                                            reference = vulnerabilityAlertFromModel.reference,
                                            domain = vulnerabilityAlertFromModel.domain,
                                            urls = vulnerabilityAlertFromModel.urls.toDomainVO(),
                                            vulnerabilityRefId = it.id,
                                            vulnerabilityCategoryRefId = it.vulnerabilityCatId
                                        ).toMono()
                                    }
                            }.collectList()
                            .flatMap {
                                _scanResultRepository.save(ScanResult(
                                    projectId = projectId,
                                    executionId = executionId,
                                    scanner = securityScanResult.scanner.toString(),
                                    scannerVersion = securityScanResult.scannerVersion,
                                    alerts = it).toMono())
                            }
                    }.then()
                } else {
                    ProjectTypeIsNotSecurityException(projectId).toMono()
                }
            }
    }

    override fun deleteScanResultById(id: String): Mono<Void> = _scanResultRepository.deleteById(id)

    override fun count(): Mono<Long> = _scanResultRepository.count()
}