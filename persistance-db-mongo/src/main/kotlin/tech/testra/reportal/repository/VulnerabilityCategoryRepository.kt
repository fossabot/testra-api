package tech.testra.reportal.repository

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.mongodb.core.ReactiveMongoTemplate
import org.springframework.data.mongodb.core.findById
import org.springframework.data.mongodb.core.query.Criteria
import org.springframework.data.mongodb.core.query.Query
import org.springframework.data.mongodb.core.query.isEqualTo
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import reactor.core.publisher.toMono
import tech.testra.reportal.domain.entity.VulnerabilityCategory

class VulnerabilityCategoryRepository : IVulnerabilityCategoryRepository {

    @Autowired
    lateinit var template: ReactiveMongoTemplate

    override fun save(vulnerabilityCategoryM: Mono<VulnerabilityCategory>): Mono<VulnerabilityCategory> =
        vulnerabilityCategoryM.flatMap {
            template.findOne(Query(Criteria.where("name").isEqualTo(it.name)), VulnerabilityCategory::class.java)
                .switchIfEmpty(template.save(vulnerabilityCategoryM))
                .flatMap { it.toMono() }
        }

    override fun findById(id: String) = template.findById<VulnerabilityCategory>(id)

    override fun findAll(): Flux<VulnerabilityCategory> = template.findAll(VulnerabilityCategory::class.java)

    override fun deleteById(id: String): Mono<Void> =
        template.remove(Query(Criteria.where("id").isEqualTo(id)), VulnerabilityCategory::class.java).then()

    override fun count(): Mono<Long> = template.count(Query(), VulnerabilityCategory::class.java)
}