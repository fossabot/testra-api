package tech.testra.reportal.repository

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.mongodb.core.ReactiveMongoTemplate
import org.springframework.data.mongodb.core.findById
import org.springframework.data.mongodb.core.query.Criteria
import org.springframework.data.mongodb.core.query.Query
import org.springframework.data.mongodb.core.query.isEqualTo
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import tech.testra.reportal.domain.entity.Vulnerability

class VulnerabilityRepository : IVulnerabilityRepository {
    @Autowired
    lateinit var template: ReactiveMongoTemplate

    override fun save(vulnerabilityM: Mono<Vulnerability>): Mono<Vulnerability> =
        template.save(vulnerabilityM)

    override fun findById(id: String) = template.findById<Vulnerability>(id)

    override fun findByName(name: String): Mono<Vulnerability> =
        template.findOne(Query(Criteria.where("name").isEqualTo(name)), Vulnerability::class.java)

    override fun findAll(): Flux<Vulnerability> = template.findAll(Vulnerability::class.java)

    override fun deleteById(id: String): Mono<Void> =
        template.remove(Query(Criteria.where("id").isEqualTo(id)), Vulnerability::class.java).then()

    override fun count(): Mono<Long> = template.count(Query(), Vulnerability::class.java)
}